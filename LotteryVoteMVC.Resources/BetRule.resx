<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ABPL2WinLaw" xml:space="preserve">
    <value>在18A, 18B和 18C公司中,AA和BB都至少有一次等于'2D-包组'中的数字串</value>
  </data>
  <data name="Bet" xml:space="preserve">
    <value>下注</value>
  </data>
  <data name="BetType" xml:space="preserve">
    <value>下注类型</value>
  </data>
  <data name="D2HeadLastWinLaw" xml:space="preserve">
    <value>XX至少有一次等于‘2D-头尾’中的数字串</value>
  </data>
  <data name="D2HeadWinLaw" xml:space="preserve">
    <value>XX至少有一次等于‘2D-头’中的数字串</value>
  </data>
  <data name="D2LastWinLaw" xml:space="preserve">
    <value>XX至少有一次等于‘2D-尾’中的数字串</value>
  </data>
  <data name="D2Roll7WinLaw" xml:space="preserve">
    <value>XX至少有一次等于‘2D-包组7’中的数字串</value>
  </data>
  <data name="D2RollWinLaw" xml:space="preserve">
    <value>XX至少有一次等于‘2D-包组’中的数字串</value>
  </data>
  <data name="D3HeadLastWinLaw" xml:space="preserve">
    <value>XXX至少有一次等于‘3D-头尾’中的数字串</value>
  </data>
  <data name="D3HeadWinLaw" xml:space="preserve">
    <value>XXX至少有一次等于‘3D-头’中的数字串</value>
  </data>
  <data name="D3LastWinLaw" xml:space="preserve">
    <value>XXX至少有一次等于‘3D-尾’中的数字串</value>
  </data>
  <data name="D3Roll7WinLaw" xml:space="preserve">
    <value>XXX至少有一次等于‘3D-包组7’中的数字串</value>
  </data>
  <data name="D3RollWinLaw" xml:space="preserve">
    <value>XXX至少有一次等于‘3D-包组’中的数字串</value>
  </data>
  <data name="D4LastWinLaw" xml:space="preserve">
    <value>XXXX至少有一次等于‘4D-尾’中的数字串</value>
  </data>
  <data name="D4RollWinLaw" xml:space="preserve">
    <value>XXXX至少有一次等于‘4D-包组’中的数字串</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>示例</value>
  </data>
  <data name="Formula" xml:space="preserve">
    <value>中奖金额=下注*赔率*倍数</value>
  </data>
  <data name="GameDescript" xml:space="preserve">
    <value>玩法说明</value>
  </data>
  <data name="GameDescription" xml:space="preserve">
    <value>越南彩2(越南彩票的一般玩法)是基于越南传统型彩票的开奖结果。彩票由多间公司开出，名称为“Hanoi”的公司所开出的彩票有27个数字字符串，其他公司则为18个字符串。下注时只需写下数字串和选择游戏类型，如果你在正确位置上押中正确的数字串，你就赢。</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>长度</value>
  </data>
  <data name="LocationAndRange" xml:space="preserve">
    <value>位置 &amp; 范围</value>
  </data>
  <data name="Multiple" xml:space="preserve">
    <value>倍数</value>
  </data>
  <data name="Pl2WinLaw" xml:space="preserve">
    <value>AA和BB都至少有一次等于'2D-包组'中的数字串</value>
  </data>
  <data name="Pl3WinLaw" xml:space="preserve">
    <value>AA、BB和CC都至少有一次等于'2D-包组'中的数字串</value>
  </data>
  <data name="Remark" xml:space="preserve">
    <value>备注</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>结果</value>
  </data>
  <data name="Rule" xml:space="preserve">
    <value>规则</value>
  </data>
  <data name="Rule1" xml:space="preserve">
    <value>’头‘ 包括彩票结果中的n-位数字串，n代表你所下注的数字串的长度；</value>
  </data>
  <data name="Rule2" xml:space="preserve">
    <value>’尾‘ 包括彩票结果中最后一个数字串的倒数n个数字；</value>
  </data>
  <data name="Rule3" xml:space="preserve">
    <value>’头尾‘包括 ’头‘ 和 ’尾‘ 所包含的所有数字串；</value>
  </data>
  <data name="Rule4" xml:space="preserve">
    <value>‘包组’ 包括彩票结果中所有数字串的倒数n个数字；</value>
  </data>
  <data name="Rule5" xml:space="preserve">
    <value>‘包组7’ 包括彩票结果中第一个到第六个或者是最后一个数字串的倒数n个数字；</value>
  </data>
  <data name="Rule6" xml:space="preserve">
    <value>对于‘包组过关2’和‘包组过关3’，我们使用‘2D-包组’的数字串检查用户的下注的数字串。如果你下注 AA#BB，例如AA在’2D-包组‘出现一次，BB出现三次，那么倍数是1；如果AA出现三次，BB出现两次，那么倍数也是2。</value>
  </data>
  <data name="Rule7" xml:space="preserve">
    <value>对于‘ABC’包组过关2，我们使用在18A, 18B和 18C公司中‘2D-包组’的数字串检查用户的下注的数字串。如果你下注 AA#BB，例如AA在’2D-包组‘出现一次，BB出现三次，那么倍数是1；如果AA出现三次，BB出现两次，那么倍数是2。</value>
  </data>
  <data name="WinAmount" xml:space="preserve">
    <value>中奖金额</value>
  </data>
  <data name="WinLaw" xml:space="preserve">
    <value>赢的条件</value>
  </data>
</root>