<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ABPL2WinLaw" xml:space="preserve">
    <value>Both 18A ,18B and18C Company, AA and BB all equal a numeric string in '2D-Roll' at least once</value>
  </data>
  <data name="Bet" xml:space="preserve">
    <value>Cược</value>
  </data>
  <data name="BetType" xml:space="preserve">
    <value>Các loại cá cược</value>
  </data>
  <data name="D2HeadLastWinLaw" xml:space="preserve">
    <value>XX equals a numberic string in '2D-HeadLast' at least once</value>
  </data>
  <data name="D2HeadWinLaw" xml:space="preserve">
    <value>XX equals a numberic string in '2D-Head' at least once</value>
  </data>
  <data name="D2LastWinLaw" xml:space="preserve">
    <value>XX equals a numberic string in '2D-Last' at least once</value>
  </data>
  <data name="D2Roll7WinLaw" xml:space="preserve">
    <value>XX equals a numberic string in '2D-Roll7' at least once</value>
  </data>
  <data name="D2RollWinLaw" xml:space="preserve">
    <value>XX equals a numberic string in '2D-Roll' at least once</value>
  </data>
  <data name="D3HeadLastWinLaw" xml:space="preserve">
    <value>XXX equals a numberic string in '3D-HeadLast' at least once</value>
  </data>
  <data name="D3HeadWinLaw" xml:space="preserve">
    <value>XXX equals a numberic string in '3D-Head' at least once</value>
  </data>
  <data name="D3LastWinLaw" xml:space="preserve">
    <value>XXX equals a numberic string in '3D-Last' at least once</value>
  </data>
  <data name="D3Roll7WinLaw" xml:space="preserve">
    <value>XXX equals a numberic string in '3D-Roll7' at least once</value>
  </data>
  <data name="D3RollWinLaw" xml:space="preserve">
    <value>XXX equals a numberic string in '3D-Roll' at least once</value>
  </data>
  <data name="D4LastWinLaw" xml:space="preserve">
    <value>XXXX equals a numberic string in '4D-Last' at least once</value>
  </data>
  <data name="D4RollWinLaw" xml:space="preserve">
    <value>XXXX equals a numberic string in '4D-Roll' at least once</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>Ví dụ</value>
  </data>
  <data name="Formula" xml:space="preserve">
    <value>Tiền Thắng cược=Cược*Trúng*Xuyên</value>
  </data>
  <data name="GameDescript" xml:space="preserve">
    <value>Cách chơi</value>
  </data>
  <data name="GameDescription" xml:space="preserve">
    <value>LottoVN2(normal playing method of Vitenam lottery) is based on the result of Vitenam traditional lottery. Lottery are drawed by many companies. Lottery result of company named 'Hanoi' has 27 numeric strings, other Companies have 18 strings. Just write down the number strings and choose the game type. If you bet the right number string in the right position,you win.</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Chiều dài</value>
  </data>
  <data name="LocationAndRange" xml:space="preserve">
    <value>Vị trí &amp; Phạm vi</value>
  </data>
  <data name="Multiple" xml:space="preserve">
    <value>Xuyên</value>
  </data>
  <data name="Pl2WinLaw" xml:space="preserve">
    <value>AA and BB all equal a numberic string in '2D-Roll' at least once</value>
  </data>
  <data name="Pl3WinLaw" xml:space="preserve">
    <value>AA, BB and CC all equal a numberic string in '2D-Roll' at least once</value>
  </data>
  <data name="Remark" xml:space="preserve">
    <value>Ghi chú</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Kết quả</value>
  </data>
  <data name="Rule" xml:space="preserve">
    <value>Luật chơi</value>
  </data>
  <data name="Rule1" xml:space="preserve">
    <value>'Head' includes n-digit number of the lottery result,'n' is the length of number you bet;</value>
  </data>
  <data name="Rule2" xml:space="preserve">
    <value>'Last' includes last n digits of the last numberic string of the lottery result;</value>
  </data>
  <data name="Rule3" xml:space="preserve">
    <value>'Head+Last' includes both numberic strings of 'Head' and 'Last';</value>
  </data>
  <data name="Rule4" xml:space="preserve">
    <value>'Roll' includes last n digits of all numberic strings in lottery result.</value>
  </data>
  <data name="Rule5" xml:space="preserve">
    <value>'Roll7' includes last n digits of from first to six or last numberic strings in lottery result.</value>
  </data>
  <data name="Rule6" xml:space="preserve">
    <value>As for 'Roll parlay 2' and 'Roll Parlay 3',we verify user's bet with strings in '2D-Roll'. If you bet AA#BB, the mulitiple of bonus is the smaller number of occurrences of AA and BB in '2D-Roll'. For example, if AA appears in '2D-Roll' once, BB three times,then the multiple is 1. If AA appear in '2D-Roll' three time and BB twice, then the multiple is 2.</value>
  </data>
  <data name="Rule7" xml:space="preserve">
    <value>As for 'ABC’ Roll parlay 2,we verify both 18A ,18B and18C company with strings in '2D-Roll'. If you bet AA#BB, the multiple of bonus is the smaller number of occurrences of AA and BB in '2D-Roll'. For example, if AA appears in '2D-Roll' once, BB three times, then the multiple is 1. If AA appear in '2D-Roll' three times and BB twice, then the multiple is 2.</value>
  </data>
  <data name="WinAmount" xml:space="preserve">
    <value>Tiền Thắng cược</value>
  </data>
  <data name="WinLaw" xml:space="preserve">
    <value>Điều kiện chiến thắng</value>
  </data>
</root>