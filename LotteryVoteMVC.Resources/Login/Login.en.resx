<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="agree" xml:space="preserve">
    <value>Agree</value>
  </data>
  <data name="Agreement1" xml:space="preserve">
    <value>Customers whoever place bet in our system which means they agree with our terms and conditions.</value>
  </data>
  <data name="Agreement10" xml:space="preserve">
    <value>If online gambling is illegal in customer's country and customer still need to place bet in our system, company will not responsible for any consequence.</value>
  </data>
  <data name="Agreement2" xml:space="preserve">
    <value>Customers need to report to our customer service whenever they found that their private informations are used by others. We will create new account for them and cancel the old account.</value>
  </data>
  <data name="Agreement3" xml:space="preserve">
    <value>Customers need to make sure their username and password are kept securely, all transactions made by that username are considered valid.</value>
  </data>
  <data name="Agreement4" xml:space="preserve">
    <value>To avoid discrepancy, please check all the bets detail in the bet list after each bet.</value>
  </data>
  <data name="Agreement5" xml:space="preserve">
    <value>Bets which are placed after the match date and time are considered void or not valid.</value>
  </data>
  <data name="Agreement6" xml:space="preserve">
    <value>Any complaint on bets please report before match closing time. Complaint after match closing time will not entertained.</value>
  </data>
  <data name="Agreement7" xml:space="preserve">
    <value>Odds changed due to type error or system error are considered not valid even though customers have placed bet on it. Company reserved the rights to alter the odds according to system defined odds calculation.</value>
  </data>
  <data name="Agreement8" xml:space="preserve">
    <value>Odds are changed periodically, so winning prize is calculated base on the odds which customers' bet.</value>
  </data>
  <data name="Agreement9" xml:space="preserve">
    <value>If company found that customers' bets having abnormity, company has the rights to terminate future bets from that customer and all the bets placed before the termination are considered valid and customers are not allowed to ask for refund and void of bets.</value>
  </data>
  <data name="Disagree" xml:space="preserve">
    <value>Disagree</value>
  </data>
  <data name="LanguageLabel" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LoginField" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginFaild" xml:space="preserve">
    <value>Login Faild</value>
  </data>
  <data name="PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="UserNameLabel" xml:space="preserve">
    <value>UserName</value>
  </data>
  <data name="UserNamePasswordFaild" xml:space="preserve">
    <value>User name or password faild,Please retry!</value>
  </data>
  <data name="VerifyCode" xml:space="preserve">
    <value>verify code</value>
  </data>
  <data name="VerifyCodeError" xml:space="preserve">
    <value>VerifyCode was error!</value>
  </data>
  <data name="WelcomeString" xml:space="preserve">
    <value>Welcome to login</value>
  </data>
  <data name="Agreement11" xml:space="preserve">
    <value />
  </data>
  <data name="AgentWelcomeString" xml:space="preserve">
    <value>Welcome To Agent Login</value>
  </data>
</root>